/*-----------------------------------------------------------------------------
CSS 475 Inclass Assignment 2
By:  Brett Holman, T. Vance Roley, Thomas Dye, Zakk Roberts
Instructor:  Dr. Erika Parsons

Hotel Database
-------------------------------------------------------------------------------

Assignment requirements
1.Create the following domains: 
	a.Room types could be for instance: Standard, Deluxe, Suite, Single, Double
		(choose at least 3 different types) 
	b.Hotel numbers that are present in the Hotel table. 
	c.Room prices between $50.00 and $500.00. 
	d.Room numbers between 1 and 9999 

2.Re-create or modify  the Room table using the above domains. 

3.Modify the Booking table (allowing only guests that are present in the Guest
	table) 
	a.Add a constraint to the Booking table that the dateFrom must precede the
		dateTo. 
	b.Add a constraint to the Booking table that the same room cannot be
		double booked. (This one is tricky!)

-------------------------------------------------------------------------------

Questions
4.Answer the following: 
	a.Given that we already have data inside these tables, is it better to
		regenerate the table or just update it?  Consider the situation when
		the table has not 20, but 20 million records. 

		It's almost always better to alter the table rather than recreate on a
		live system.  It can be resource intensive and time consuming to move
		data to temporary tables.  Exporting and reimporting also causes
		downtime.
		
	b.What are the pros and cons of updating the table vs. re-creating it from
		scratch? 

		Updating a table is good when a system is live with a lot of activity
		and downtime is not an option.  There is the chance that an applied
		change will break the database in unexpected ways with newly inserted
		data.  Othertimes, the DBMS does not allow you to make certain changes
		after the table is created.
		
		Re-creating tables from scratch allows for clean, potentially elegant
		deployment.  It may not be a good option if the database is on a live
		system, or contains lots of information.


	c.What could you do if you were not allowed to re-create a table from
		scratch, i.e., you can only modify it?

		The ALTER TABLE statement is used to add, delete, or modify columns in
		an existing table.  It can be used to add new constraints and checks
		that were not supplied originally when the table was created.

-----------------------------------------------------------------------------*/

#Comment out if creating tables in a new schema
DROP TABLE Booking;
DROP TABLE Guest;
DROP TABLE Room;
DROP TABLE Hotel;

#Create tables here------------------------------------------------------------
CREATE TABLE Hotel (
    hotelNo INT NOT NULL UNIQUE,
    hotelName VARCHAR(15) NOT NULL,
    hotelCity VARCHAR(15) NOT NULL,
    PRIMARY KEY (hotelNo)
);

CREATE TABLE Room (
    roomNo INT NOT NULL CHECK (VALUE BETWEEN 1 AND 9999),
    H_hotelNo INT NOT NULL CHECK (VALUE IN (SELECT 
            hotelNo
        FROM
            Hotel)),
    roomType VARCHAR(8) NOT NULL CHECK (roomType IN ('single' , 'double', 'suite')),
    roomPrice DECIMAL(5 , 2 ) NOT NULL CHECK (value BETWEEN 50 AND 500),
    PRIMARY KEY (roomNo , H_hotelNo),
    FOREIGN KEY (H_hotelNo)
        REFERENCES Hotel (hotelNo)
        ON DELETE CASCADE ON UPDATE CASCADE
);
	
CREATE TABLE Guest (
    guestNo INT NOT NULL UNIQUE CHECK (value > 0),
    guestName VARCHAR(60) NOT NULL,
    guestAddress VARCHAR(60),
    PRIMARY KEY (guestNo)
);

CREATE TABLE Booking (
    H_hotelNo INT NOT NULL CHECK (value IN (SELECT 
            hotelNo
        FROM
            Hotel)),
    G_guestNo INT NOT NULL CHECK (value IN (SELECT 
            guestNo
        FROM
            Guest)),
    dateFrom DATE NOT NULL,
    dateTo DATE NOT NULL CHECK (value >= dateFrom),
    R_roomNo INT NOT NULL,
    PRIMARY KEY (H_hotelNo , dateFrom , R_roomNo),
    FOREIGN KEY (H_hotelNo)
        REFERENCES Hotel (hotelNo)
        ON DELETE NO ACTION ON UPDATE CASCADE,
    FOREIGN KEY (G_guestNo)
        REFERENCES Guest (guestNo)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (R_roomNo)
        REFERENCES Room (roomNo)
        ON DELETE NO ACTION ON UPDATE CASCADE
);

DELIMITER $$
CREATE TRIGGER PreventDoubleBooking BEFORE INSERT ON Booking 
FOR EACH ROW
BEGIN
	DECLARE num_conflicts INTEGER;
    DECLARE msg VARCHAR(255);
    
	SELECT 
    COUNT(*)
INTO num_conflicts FROM
    Booking
WHERE
    H_hotelNo = NEW.H_hotelNo
        AND R_roomNo = NEW.R_roomNo
        AND ((dateFrom <= NEW.dateFrom
        AND dateTo > NEW.dateFrom)
        OR (dateFrom < NEW.dateTo
        AND dateTo >= NEW.dateTo)
        OR (dateFrom >= NEW.dateFrom
        AND dateFrom < NEW.dateTo)
        OR (dateTo > NEW.dateFrom
        AND dateTo <= NEW.dateTo));
        
        IF num_conflicts > 0 THEN
			set msg = "DIE: You broke the rules... I will now Smite you, hold still...";
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = msg;
	END IF;
END$$
DELIMITER ;

#Default data inserted here----------------------------------------------------
INSERT INTO Hotel VALUES (001, 'Hilton', 'Seattle');
INSERT INTO Hotel VALUES (002, 'Marriot', 'Honolulu');
INSERT INTO Hotel VALUES (003, 'Best Western', 'Los Angeles');
INSERT INTO Hotel VALUES (004, 'Super 8', 'Portland');
INSERT INTO Hotel VALUES (005, 'Marriot', 'Seattle');
INSERT INTO Hotel VALUES (006, 'Best Western', 'Seattle');

INSERT INTO Room VALUES (100, 001, 'Suite', 300);
INSERT INTO Room VALUES (200, 001, 'Double', 250);
INSERT INTO Room VALUES (300, 001, 'Single', 200);
INSERT INTO Room VALUES (100, 002, 'Double', 200);
INSERT INTO Room VALUES (200, 002, 'Single', 150);
INSERT INTO Room VALUES (100, 003, 'Double', 120);
INSERT INTO Room VALUES (200, 003, 'Single', 100);
INSERT INTO Room VALUES (100, 004, 'Single', 80);

INSERT INTO Guest VALUES (001, 'Clark Olson', NULL);
INSERT INTO Guest VALUES (002, 'Julie Tahajian', 'Pasadina, California');
INSERT INTO Guest VALUES (003, 'Farha Banerjee', 'Dallas, Texas');
INSERT INTO Guest VALUES (004, 'Ichiro Suzuki', 'New York, New York');
INSERT INTO Guest VALUES (005, 'T. Vance Roley', 'Seattle, Washington');
INSERT INTO Guest VALUES (006, 'Brett Holman', 'Seattle, Washington');
INSERT INTO Guest VALUES (007, 'Zakk Roberts', 'Seattle, Washington');
INSERT INTO Guest VALUES (008, 'Thomas Dye', 'Seattle, Washington');

INSERT INTO Booking VALUES (001, 004, '2003-08-10', '2003-08-12', 100);
INSERT INTO Booking VALUES (004, 001, '2003-11-02', '2003-11-24', 100);
INSERT INTO Booking VALUES (003, 002, '2004-05-12', '2004-05-16', 200);
INSERT INTO Booking VALUES (002, 003, '2004-09-29', '2004-10-13', 200);
INSERT INTO Booking VALUES (001, 004, '2005-12-23', '2005-12-29', 100);
INSERT INTO Booking VALUES (002, 001, '2005-12-31', '2006-01-02', 300);
INSERT INTO Booking VALUES (003, 007, '2008-03-02', '2008-03-05', 100);
INSERT INTO Booking VALUES (003, 005, '2009-03-02', '2009-03-05', 100);
INSERT INTO Booking VALUES (003, 005, '2009-03-27', '2009-03-28', 200);
INSERT INTO Booking VALUES (003, 006, '2009-03-27', '2009-03-28', 100);

/*-----------------------------------------------------------------------------
When recreating the table from scratch, don't copy from below this line.
-----------------------------------------------------------------------------*/

#Add insertions for testing constraints here-----------------------------------

#Okay with 'Sad' room type
#INSERT INTO Room VALUES (101, 003, 'Sad', 300);

#Not okay with hotel number 007
#INSERT INTO Room VALUES (102, 007, 'Single', 350);

#Okay with price of $999
#INSERT INTO Room VALUES (103, 003, 'Single', 999);

#Okay with price of $0
#INSERT INTO Room VALUES (103, 003, 'Single', 0);

#Okay with room number 10000
#INSERT INTO Room VALUES (10000, 003, 'Single', 499);

#Okay with room number 0
#INSERT INTO Room VALUES (0, 003, 'Single', 350);

#didn't like room number of 10000
#INSERT INTO Booking VALUES (003, 006, '2009-03-27', '2009-03-28', 10000);

#didn't like room number of 0
#INSERT INTO Booking VALUES (003, 006, '2009-03-27', '2009-03-28', 0);

#Add selection statements here-------------------------------------------------

#1	Display all information in the hotel relation.
SELECT 
    *
FROM
    Hotel;

#2	List the names and address of guests from Seattle. (The guestAddress
#	includes the city, state, etc.)
SELECT 
    *
FROM
    Guest
WHERE
    guestAddress LIKE '%Seattle%';

#3	Modify your query (2) to do the listing alphabetically by name
SELECT 
    *
FROM
    Guest
WHERE
    guestAddress LIKE '%Seattle%'
ORDER BY guestName ASC;

#4	Determine the number of hotels in the database.
SELECT 
    COUNT(*)
FROM
    Hotel;
	
#5	Determine how many different guests have made bookings for some part of
#	March 2009.
SELECT 
    COUNT(*)
FROM
    Booking
WHERE
    (MONTH(dateFrom) = 03
        OR MONTH(dateTo) = 03)
        AND YEAR(dateFrom) = 2009
        OR YEAR(dateTo) = 2009;
	
#6	Count how many hotels there are in each city.
SELECT 
    hotelCity, COUNT(*)
FROM
    Hotel
GROUP BY hotelCity;

#7	List the hotelNo and average price of ‘Standard’ rooms at each hotel.



#8	List the name of all guests currently staying at the Hilton (use
#	CURRENT_DATE – see below).



#9	Count the number of rooms in each hotel in Las Vegas along with the name of
#	the hotel.



#10 Count the number of current bookings at each hotel and display with the
#	hotel name and city. List only the hotels with at least 20 current
#	bookings.



#11	List the rooms that are currently unoccupied at the Hilton.
